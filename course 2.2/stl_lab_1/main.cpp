/*
    1) Напишите алгоритм сортировки (любой простейший) содержимого вектора целых чисел, используя оператор operator[].

    2) Напишите алгоритм сортировки (любой простейший) содержимого вектора целых чисел, используя метод at().

    3) Напишите алгоритм сортировки (любой простейший) содержимого вектора целых чисел, используя для доступа к содержимому 
    вектора только итераторы. Для работы с итераторами допустимо использовать только операторы получения текущего элемента и 
    перехода в следующему (подсказка, можно сохранять копию итератора указывающего на некоторый элемент). 

    4) Прочитайте во встроенный массив С содержимое текстового файлы, скопируйте данные в вектор одной строкой кода 
    (без циклов и алгоритмов STL)

    5) Напишите программу, сохраняющую в векторе числа, полученные из стандартного ввода (окончанием ввода является число 0). 
    Удалите все элементы, которые делятся на 2 (не используете стандартные алгоритмы STL), если последнее число 1. 
    Если последнее число 2, добавьте после каждого числа которое делится на 3 три единицы.

    6) Напишите функцию void fillRandom(double* array, int size) заполняющую массив случайными значениями в интервале 
    от -1.0 до 1.0. Заполните с помощью заданной функции вектора размером 5,10,25,50,100 и отсортируйте его содержимое 
    (с помощью любого разработанного ранее алгоритма модифицированного для сортировки действительных чисел) */

#include "calc.h"

int main() {
    srand((unsigned) time(nullptr));
    vector<int> ivec;
    int size = 25;
    vector<int> vec;
    vector<string> s_vec;
    calc cl;
 //       cl.check_d_vec(7);
    /*cl.check_d_vec(10);
    cl.check_d_vec(15);
    cl.check_d_vec(25);
    cl.check_d_vec(50);
    cl.check_d_vec(100);*/
//    vector<int> ivec;
 //   cl.vec_fill(vec, size);
//    printvec(vec);
 //   cl.bsort_brace(vec);
  //  cl.printvec(vec);
    cl.from_file_to_vec(s_vec);
    cout << s_vec[0];
//    cl.delOdd_addOne(vec);


    return 0;
}

